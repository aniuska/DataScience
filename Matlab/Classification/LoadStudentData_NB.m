function data1 = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   STUDENTPOR = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   STUDENTPOR = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   studentpor = importfile('student-por.csv', 2, 650);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/11/06 12:52:36

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,5,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,5,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33]);
rawCellColumns = raw(:, [1,2,4,6,9,10,11,12,16,17,18,19,20,21,22,23]);


%% Create output variable
data1 = table;
data1.school = categorical(strrep(rawCellColumns(:, 1),'"',''));
data1.sex = categorical(strrep(rawCellColumns(:, 2),'"',''));
data1.age = cell2mat(rawNumericColumns(:, 1));
data1.address = categorical(strrep(rawCellColumns(:, 3),'"',''));
data1.famsize = cell2mat(rawNumericColumns(:, 2));
data1.Pstatus = categorical(strrep(rawCellColumns(:, 4),'"',''));
data1.Medu = cell2mat(rawNumericColumns(:, 3));
data1.Fedu = cell2mat(rawNumericColumns(:, 4));
data1.Mjob = categorical(strrep(rawCellColumns(:, 5),'"',''));
data1.reason = categorical(strrep(rawCellColumns(:, 7),'"',''));
data1.guardian = categorical(strrep(rawCellColumns(:, 8),'"',''));
data1.traveltime = cell2mat(rawNumericColumns(:, 5));
data1.studytime = cell2mat(rawNumericColumns(:, 6));
data1.failures = cell2mat(rawNumericColumns(:, 7));
data1.schoolsup = categorical(strrep(rawCellColumns(:, 9),'"',''));
data1.famsup = categorical(strrep(rawCellColumns(:, 10),'"',''));
data1.paid = categorical(strrep(rawCellColumns(:, 11),'"',''));
data1.activities = categorical(strrep(rawCellColumns(:, 12),'"',''));
data1.nursery = categorical(strrep(rawCellColumns(:, 13),'"',''));
data1.higher = categorical(strrep(rawCellColumns(:, 14),'"',''));
data1.internet = categorical(strrep(rawCellColumns(:, 15),'"',''));
data1.romantic = categorical(strrep(rawCellColumns(:, 16),'"',''));
data1.famrel = cell2mat(rawNumericColumns(:, 8));
data1.freetime = cell2mat(rawNumericColumns(:, 9));
data1.goout = cell2mat(rawNumericColumns(:, 10));
data1.Dalc = cell2mat(rawNumericColumns(:, 11));
data1.Walc = cell2mat(rawNumericColumns(:, 12));
data1.health = cell2mat(rawNumericColumns(:, 13));
data1.absences = cell2mat(rawNumericColumns(:, 14));
data1.G1 = cell2mat(rawNumericColumns(:, 15));
data1.G2 = cell2mat(rawNumericColumns(:, 16));
data1.G3 = cell2mat(rawNumericColumns(:, 17));

%% - Create Pass/Fail Variables for G1/G2/G3 scores

catnames = {'Fail','Pass'};
data1.G1PassFail = categorical(discretize(data1.G1,[0 10 20],'categorical',catnames));
data1.G2PassFail = categorical(discretize(data1.G2,[0 10 20],'categorical',catnames));
data1.G3PassFail = categorical(discretize(data1.G3,[0 10 20],'categorical',catnames));

data1.Response = categorical(discretize(data1.G3,[0 10 20],'categorical',catnames));

