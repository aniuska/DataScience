clear all; clc; close all;
opengl('save','software');
%% Exploratory analysis
%  Dataset: Student performance on Portugues and Maths. Data sets can be downloand at https://archive.ics.uci.edu/ml/datasets/Student+Performance
%  Data Description: 29 out of 36 features where used for the classification
%      - Variables: 16 categorical and 13 numeric - descrete
% Attributes:
% # Attributes for both student-mat.csv (Math course) and student-por.csv (Portuguese language course) datasets:
% 1 school - student's school (binary: "GP" - Gabriel Pereira or "MS" - Mousinho da Silveira)
% 2 sex - student's sex (binary: "F" - female or "M" - male)
% 3 age - student's age (numeric: from 15 to 22)
% 4 address - student's home address type (binary: "U" - urban or "R" - rural)
% 5 famsize - family size (binary: "LE3" - less or equal to 3 or "GT3" - greater than 3)
% 6 Pstatus - parent's cohabitation status (binary: "T" - living together or "A" - apart)
% 7 Medu - mother's education (numeric: 0 - none,  1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)
% 8 Fedu - father's education (numeric: 0 - none,  1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)
% 9 Mjob - mother's job (nominal: "teacher", "health" care related, civil "services" (e.g. administrative or police), "at_home" or "other")
% 10 Fjob - father's job (nominal: "teacher", "health" care related, civil "services" (e.g. administrative or police), "at_home" or "other")
% 11 reason - reason to choose this school (nominal: close to "home", school "reputation", "course" preference or "other")
% 12 guardian - student's guardian (nominal: "mother", "father" or "other")
% 13 traveltime - home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)
% 14 studytime - weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)
% 15 failures - number of past class failures (numeric: n if 1<=n<3, else 4)
% 16 schoolsup - extra educational support (binary: yes or no)
% 17 famsup - family educational support (binary: yes or no)
% 18 paid - extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)
% 19 activities - extra-curricular activities (binary: yes or no)
% 20 nursery - attended nursery school (binary: yes or no)
% 21 higher - wants to take higher education (binary: yes or no)
% 22 internet - Internet access at home (binary: yes or no)
% 23 romantic - with a romantic relationship (binary: yes or no)
% 24 famrel - quality of family relationships (numeric: from 1 - very bad to 5 - excellent)
% 25 freetime - free time after school (numeric: from 1 - very low to 5 - very higj)
% 26 goout - going out with friends (numeric: from 1 - very low to 5 - very higj)
% 27 Dalc - workday alcohol consumption (numeric: from 1 - very low to 5 - very higj)
% 28 Walc - weekend alcohol consumption (numeric: from 1 - very low to 5 - very higj)
% 29 health - current health status (numeric: from 1 - very bad to 5 - very good)
% 30 absences - number of school absences (numeric: from 0 to 93)
% # these grades are related with the course subject, Math or Portuguese:
% 31 G1 - first period grade (numeric: from 0 to 20)
% 31 G2 - second period grade (numeric: from 0 to 20)
% 32 G3 - final grade (numeric: from 0 to 20, output target)
%
% Output variable (desired target):
% Response Fail = G3 0-9, Pass + G3 10-20
%
%  Strategy:
% 1) Use Summary function to get basic statistics of each feature
% 2) Crosstable to see relationship between features. Due the data sets dimension are 395x29 only 
%    few numeric variable were used to avoid memory overflow
% 3) Plot histogram of each feature using PDF or probability normalisation to determine the underlying 
%    distribution of each feature
%
% Note: use the 'pdf' histogram plot to determine the underlying probability distribution of the data by 
%       comparing it against a known probability density function.    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
% Autogenerated code for reading dataset
file = 'student-por.csv';
%file = 'student-mat.csv';
student1 = LoadStudentData_NB(file,2,650);
names = student1.Properties.VariableNames;

% Selecting Variables for Analysis
student = student1(:,[1:4 6:29 end]); 
names = student.Properties.VariableNames;

% Convert all the categorical variables into nominal arrays
[nrows, ncols] = size(student);
category = false(1,ncols);
for i = 1:ncols
    if isa(student.(names{i}),'categorical') || isa(student.(names{i}),'nominal')
        category(i) = true;
        student.(names{i}) = nominal(student.(names{i}));
    end
end

%% Data Exploration
%Basic statistic summary
format compact;
summary(student);
format;

%Crosstable - Contingency table
sPass=student(student.Response=='Pass',:);
sFail=student(student.Response=='Fail',:);
[tbl_p,chi2_p,p_p,labels_p] = crosstab(student.traveltime,student.studytime,student.failures,...
                                       student.Dalc,student.Walc,student.health,student.absences);
%% Visualising Data
%1)create a histogram using the 'probability' normalization.
figure;
title('*** Feature distribution - probability normalisation ***');
for k = 1:28
  subplot(4,7,k);
  histogram(student.(names{k}),'Normalization','probability');
  xlabel(names{k});
end

%2)Specify the Normalization property as 'countdensity' to flatten out the bins containing the outliers. 
%Now, the area of each bin (rather than the height) represents the frequency of observations in that interval.
figure;
title('*** Feature distribution ***');
for k = 1:28
  subplot(4,7,k);
    histogram(student.(names{k}),'Normalization','countdensity');
  xlabel(names{k});
end

%3)Plot a histogram with Normalization set to 'pdf' to produce an estimation of the probability density function.
figure;
title('*** Feature distribution - estimation of PDF ***');
for k = 1:28
  subplot(4,7,k); %for all features 
  if isnumeric(student.(names{k})) 
      n = max(student.(names{k}));
      %edges = [-10 -2:0.25:2 10];
      %edges =[(-1* n) : n];
      h=histogram(student.(names{k}),'Normalization','pdf');
      h.BinLimits= [0,n];
      
      %Overlay a plot of the probability density function for a normal distribution with 
      %a mean of mu and a standard deviation of sigma.
      hold on
      y = 0:0.1:n;
      mu = mean(student.(names{k}));
      sigma = std(student.(names{k}));
      f = exp(-(y-mu).^2./(2*sigma^2))./(sigma*sqrt(2*pi));
      plot(y,f,'LineWidth',1.5)
  else
      h=histogram(student.(names{k}),'Normalization','pdf');
  end
  xlabel(names{k}); %for all features
end

%Plot a histogram with Normalization set to 'pdf' to produce an estimation of the probability density function.
%4)Normalise Z-score for numeric features and plot histogram with PDF
figure;
title('*** Feature distribution (normalising z-score)- estimation of PDF ***');
for k = 1:28
  subplot(4,7,k);
  if isnumeric(student.(names{k})) 
      n = max(student.(names{k}));
      %edges = [-10 -2:0.25:2 10];
      %edges =[(-1* n) : n];
      h=histogram(zscore(student.(names{k})),'Normalization','pdf');
      h.BinLimits= [0,n];
      
      %Overlay a plot of the probability density function for a normal distribution with 
      %a mean of mu and a standard deviation of sigma.
      hold on
      y = 0:0.1:n;
      mu=0;
      sigma=1;
      %mu=mean(zscore(student.(names{k})));
      %sigma = std(zscore(student.(names{k})));
      f = exp(-(y-mu).^2./(2*sigma^2))./(sigma*sqrt(2*pi));
      plot(y,f,'LineWidth',1.5)
  else
      h=histogram(student.(names{k}),'Normalization','pdf');
  end
  xlabel(names{k});
end

%whos
    
